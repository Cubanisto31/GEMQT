#!/usr/bin/env python3
"""
Script utilitaire pour configurer les variables d'environnement n√©cessaires √† l'exp√©rimentation.
Usage: python setup_env.py
"""
import os
import sys
from pathlib import Path


def load_api_keys():
    """Charge les cl√©s API depuis le fichier API KEY v1.txt."""
    api_file = Path("API KEY v1.txt")
    if not api_file.exists():
        print(f"‚ùå Fichier {api_file} non trouv√©.")
        return None
    
    keys = {}
    with open(api_file, 'r', encoding='utf-8') as f:
        content = f.read()
        
    # Extraction des cl√©s API
    import re
    openai_match = re.search(r'OPENAI_API_KEY="([^"]+)"', content)
    google_api_match = re.search(r'GOOGLE_API_KEY="([^"]+)"', content)
    google_cx_match = re.search(r'GOOGLE_CX="([^"]+)"', content)
    
    if openai_match:
        keys['OPENAI_API_KEY'] = openai_match.group(1)
    if google_api_match:
        keys['GOOGLE_API_KEY'] = google_api_match.group(1)
    if google_cx_match:
        keys['GOOGLE_CX'] = google_cx_match.group(1)
    
    return keys


def set_environment_variables(keys):
    """Configure les variables d'environnement."""
    for key, value in keys.items():
        os.environ[key] = value
        print(f"‚úÖ {key} configur√©")


def create_dotenv_file(keys):
    """Cr√©e un fichier .env pour la persistance."""
    env_content = []
    for key, value in keys.items():
        env_content.append(f'{key}="{value}"')
    
    with open('.env', 'w') as f:
        f.write('\n'.join(env_content))
    print("‚úÖ Fichier .env cr√©√©")


def verify_configuration():
    """V√©rifie que toutes les cl√©s n√©cessaires sont pr√©sentes."""
    required_keys = ['OPENAI_API_KEY', 'GOOGLE_API_KEY', 'GOOGLE_CX']
    missing_keys = []
    
    for key in required_keys:
        if not os.environ.get(key):
            missing_keys.append(key)
    
    if missing_keys:
        print(f"‚ö†Ô∏è  Cl√©s manquantes: {', '.join(missing_keys)}")
        return False
    
    print("‚úÖ Toutes les cl√©s API sont configur√©es")
    return True


def test_api_connectivity():
    """Teste la connectivit√© avec les APIs (optionnel)."""
    print("\nüîÑ Test de connectivit√© des APIs...")
    
    # Test OpenAI (simple validation de la cl√©)
    openai_key = os.environ.get('OPENAI_API_KEY')
    if openai_key and openai_key.startswith('sk-'):
        print("‚úÖ Format de cl√© OpenAI valide")
    else:
        print("‚ùå Format de cl√© OpenAI invalide")
    
    # Test Google API
    google_key = os.environ.get('GOOGLE_API_KEY')
    google_cx = os.environ.get('GOOGLE_CX')
    if google_key and google_cx:
        print("‚úÖ Cl√©s Google Search configur√©es")
    else:
        print("‚ùå Cl√©s Google Search manquantes")


def main():
    print("üöÄ Configuration de l'environnement pour l'exp√©rimentation GEO")
    print("=" * 60)
    
    # Chargement des cl√©s
    keys = load_api_keys()
    if not keys:
        print("‚ùå Impossible de charger les cl√©s API")
        sys.exit(1)
    
    print(f"üìù {len(keys)} cl√©s trouv√©es dans le fichier")
    
    # Configuration des variables d'environnement
    set_environment_variables(keys)
    
    # Cr√©ation du fichier .env
    create_dotenv_file(keys)
    
    # V√©rification
    if verify_configuration():
        print("\nüéâ Configuration termin√©e avec succ√®s !")
        test_api_connectivity()
        
        print("\nüìã Prochaines √©tapes:")
        print("1. V√©rifiez votre fichier src/config.yaml")
        print("2. Lancez l'exp√©rience: python -m src.main")
        print("3. Consultez les logs dans experiment.log")
    else:
        print("‚ùå Configuration √©chou√©e")
        sys.exit(1)


if __name__ == "__main__":
    main()